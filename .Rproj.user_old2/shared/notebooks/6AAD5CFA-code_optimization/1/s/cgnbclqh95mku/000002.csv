"0","```r
iteration = 500
feature_number = 1
grid_theta = seq(0.01, 0.99, 0.01)
grid_epsilon = seq(0.01, 0.99, 0.01)
obs_s <- noisy_observation_creature(
      stimuli_df = stimuli_sequence,
      trial_index  = 1, 
      n_sample = iteration, 
      epsilon = noise_parameter
    )

new_grid_approximation <- function(obs_s, iteration){
  
  df_lp_theta_epsilon <- get_df_lp_theta_epsilon(grid_theta, grid_epsilon, 
                                                 alpha_theta, beta_theta, 
                                                 alpha_epsilon, beta_epsilon)
  df_posterior <- expand_grid(theta = grid_theta,
                              epsilon = grid_epsilon,
                              feature_index = seq(1, feature_number))
  # not sure when do we really need the non-log one, save some $$$  
  df_posterior$unnormalized_log_posterior <- NA_real_
  df_posterior$log_posterior <- NA_real_


  list_df_posterior <- lapply(seq(1, iteration, 1), 
                              function(x){df_posterior})
  
  
  t = 1
  while(t <= iteration){
    
    if(t == 1){
      # do some fresh calculation
      
      list_df_posterior[[t]] <- init_update( list_df_posterior[[t]], 
                                             df_lp_theta_epsilon, 
                                             obs_s[t, ],
                                             grid_theta, grid_epsilon,
                                             alpha_theta, beta_theta, 
                                             alpha_epsilon, beta_epsilon)
    }else{
      list_df_posterior[[t]] <- update_posterior(previous_posterior_df =  list_df_posterior[[t-1]],
                                                         current_posterior_df =  list_df_posterior[[t]], 
                                                         obs_s[t, ], 
                                                         grid_theta, grid_epsilon)
    }
    
    t = t + 1
  
  
  }
  
  new_pos <- list_df_posterior[[iteration]]

  return(new_pos$unnormalized_log_posterior)
}

old_grid_approximation <- function(obs_s, iteration){
  
  old_pos <- grid_apprxoimation_with_observation(
  obs_s, 
  grid_theta,
  grid_epsilon,  
  alpha_theta, 
  beta_theta,
  alpha_epsilon, 
  beta_epsilon)
  
  return(old_pos$unnormalized_log_posterior)
  
}



bm_grid_approx <- bench::mark(
  new_grid_approximation(obs_s, iteration), 
  old_grid_approximation(obs_s, iteration)
)
```"
"1","Warning: Some expressions had a GC in every iteration; so filtering is disabled.
"
"0","```r
bm_grid_approx
```"
