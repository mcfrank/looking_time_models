// WebPPL code goes here

var exampleWebpplFn = function(x) {
  return x + 1;
};

//Recursively calculate log sum with seed x and n terms
var logSum = function(x, n){
	if(n===1){
		return Math.log(x);
	}
	return Math.log(x + n - 1) + logSum(x, n-1);
}

var IG = function(targetAlpha, targetBeta, studentAlpha, studentBeta){

  return Math.log((studentAlpha + studentBeta) / studentAlpha) + webpplComputeDigamma.digamma(targetAlpha) + webpplComputeDigamma.digamma(targetAlpha + targetBeta);
};

var IGmulti = function(targetAlpha, targetBeta, studentAlpha, studentBeta, h, t){
	
	if(h===0 && t===0){
		return 0;
	}
	if(h===0){
		return logSum(studentAlpha + studentBeta, h + t) - logSum(studentBeta, t) + t * webpplComputeDigamma.digamma(targetBeta) + (h+t) * webpplComputeDigamma.digamma(targetAlpha + targetBeta);
	}
	if(t===0){
		return logSum(studentAlpha + studentBeta, h + t) - logSum(studentAlpha, h) + h * webpplComputeDigamma.digamma(targetAlpha) + (h+t) * webpplComputeDigamma.digamma(targetAlpha + targetBeta)
	}
	return logSum(studentAlpha + studentBeta, h + t) - logSum(studentAlpha, h) - logSum(studentBeta, t) + h * webpplComputeDigamma.digamma(targetAlpha) + t * webpplComputeDigamma.digamma(targetBeta) + (h+t) * webpplComputeDigamma.digamma(targetAlpha + targetBeta);
};

var IG2 = function(targetAlpha, targetBeta, studentAlpha, studentBeta, h, t){
	var oldDKL = DKL(studentAlpha, studentBeta, targetAlpha, targetBeta);
	var newDKL = DKL(studentAlpha + h, studentBeta + t, targetAlpha, targetBeta);
	return oldDKL - newDKL;
}

var DKL = function(aPrime, bPrime, a, b){
	var t1 = Math.log(mathBeta.beta(aPrime, bPrime) / mathBeta.beta(a,b));
	var t2 = (a - aPrime) * webpplComputeDigamma.digamma(a);
	var t3 = (b - bPrime) * webpplComputeDigamma.digamma(b);
	var t4 = (a - aPrime + b - bPrime) * webpplComputeDigamma.digamma(a + b);

	return t1 + t2 + t3 + t4;
}

var print = function(output){
	console.log(output.toString());
}