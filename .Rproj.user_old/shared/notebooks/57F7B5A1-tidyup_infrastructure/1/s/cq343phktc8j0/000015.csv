"0","noisy_post_pred <- function(theta, epsilon, posterior, heads = TRUE) {"
"0","  # probability of a head is:"
"0","  # (didn't get flipped * it's a head) + (got flipped + it was a tail)"
"0","  p_1 <- sum(((1 - epsilon) * theta * posterior) + "
"0","               (epsilon * (1-theta) * posterior))"
"0","  "
"0","  # the alternative:"
"0","  # (didn't get flipped * it's a tail) + (got flipped + it's a head)"
"0","  # p_0 <- sum(((1 - epsilon) * (1 - theta) * posterior) + "
"0","  #                 (epsilon * theta * posterior))"
"0","  "
"0","  # flip if you are asking for 0 probability"
"0","  ifelse(heads, p_1, 1 - p_1)"
"0","  "
"0","}"
"0",""
"0","creature_noisy_post_pred <- function("
"0","  outcome_index, "
"0","  all_possible_outcomes, "
"0","  posterior_at_t){"
"0","  "
"0","  observation_at_t_plus_one <- all_possible_outcomes %>% "
"0","    filter(index == outcome_index)"
"0","  "
"0","  feature_n <- observation_at_t_plus_one %>% "
"0","    select(starts_with(""V"")) %>% "
"0","    ncol()"
"0","  "
"0","  "
"0","    "
"0","  # calculate post predctive for each feature"
"0","  feature_predictive <- lapply(seq(1, feature_n, 1), "
"0","         function(x,"
"0","                  observation = observation_at_t_plus_one,"
"0","                  posterior = posterior_at_t){"
"0","         "
"0","           f_posterior <- posterior %>% "
"0","             filter(feature_index == x)"
"0","           "
"0","           f_observation <- observation[x] %>% "
"0","             pull()"
"0","           "
"0","           noisy_post_pred(f_posterior$theta, "
"0","                           f_posterior$epsilon, "
"0","                           f_posterior$posterior, "
"0","                           f_observation)"
"0","           "
"0","         }) "
"0","  "
"0","    return(feature_predictive %>% unlist() %>% prod())"
"0","  "
"0","  "
"0","}"
"0",""
"0","get_all_possible_creature_pred <- function("
"0","  all_possible_outcomes, "
"0","  posterior_at_t"
"0","){"
"0","  "
"0","  "
"0","  all_preds <- lapply(all_possible_outcomes$index, "
"0","         function(x, "
"0","                  apo = all_possible_outcomes, "
"0","                  pt = posterior_at_t){"
"0","            "
"0","           creature_noisy_post_pred(x, apo, pt)"
"0"," "
"0","           "
"0","         }) %>% unlist()"
"0","  "
"0","  return(all_preds %>% unlist())"
"0",""
"0","  }"
"0",""
"0",""
