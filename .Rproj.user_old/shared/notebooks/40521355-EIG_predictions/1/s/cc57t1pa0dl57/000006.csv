"0","set.seed(42)"
"0","# now iterate through timesteps"
"0","while (stimulus_idx <= trials_per_block) {"
"0","  for (f in 1:num_features) {"
"0","    # get our observation"
"0","    observations[[t]] <- noisy_observation_creature(simple_stimuli[[stimulus_idx]],"
"0","                                                    epsilon = epsilon)    "
"0","    "
"0","    # book keeping"
"0","    df$t[t] <- t"
"0","    df$stimulus_idx[t] <- stimulus_idx"
"0","    "
"0","    # get posterior"
"0","    obs_mat <- matrix(unlist(observations), ncol = 1, byrow = TRUE)"
"0","    "
"0","    posterior_at_t <- "
"0","      grid_with_theta_and_epsilon_has_epsilon(grid_theta = grid_theta, "
"0","                                              grid_epsilon = grid_epsilon, "
"0","                                              noisy_observation = obs_mat, "
"0","                                              alpha_prior = alpha_prior, "
"0","                                              beta_prior= beta_prior, "
"0","                                              alpha_epsilon = alpha_epsilon, "
"0","                                              beta_epsilon = beta_epsilon)"
"0","    "
"0","    "
"0","    # make possible scenarios"
"0","    observations[[t+1]] <- NA"
"0","    observations[[t+1]][f] <- FALSE"
"0","    obs_mat_plus_0 <- matrix(unlist(observations), ncol = 1, byrow = TRUE)"
"0","    observations[[t+1]] <- NA"
"0","    observations[[t+1]][f] <- TRUE"
"0","    obs_mat_plus_1 <- matrix(unlist(observations), ncol = 1, byrow = TRUE)"
"0","    "
"0","  "
"0","    "
"0","    # update posteriors for both scenarios"
"0","    posterior_at_t_plus_1_if_0 <- "
"0","      grid_with_theta_and_epsilon_has_epsilon(grid_theta = grid_theta, "
"0","                                              grid_epsilon = grid_epsilon, "
"0","                                              noisy_observation = obs_mat_plus_0 %>% t(), "
"0","                                              alpha_prior = alpha_prior, "
"0","                                              beta_prior= beta_prior, "
"0","                                              alpha_epsilon = alpha_epsilon, "
"0","                                              beta_epsilon = beta_epsilon)"
"0","    "
"0","    posterior_at_t_plus_1_if_1 <- "
"0","      grid_with_theta_and_epsilon_has_epsilon(grid_theta = grid_theta, "
"0","                                              grid_epsilon = grid_epsilon, "
"0","                                              noisy_observation = obs_mat_plus_1 %>% t(), "
"0","                                              alpha_prior = alpha_prior, "
"0","                                              beta_prior= beta_prior, "
"0","                                              alpha_epsilon = alpha_epsilon, "
"0","                                              beta_epsilon = beta_epsilon)"
"0","    "
"0","    # compute EIG "
"0","    df$dkl_if_0[t] <- dkl(posterior_at_t_plus_1_if_0$posterior, "
"0","                          posterior_at_t$posterior)"
"0","    df$dkl_if_1[t] <- dkl(posterior_at_t_plus_1_if_1$posterior, "
"0","                          posterior_at_t$posterior)"
"0","    "
"0","    df$post_pred[t] <- noisy_post_pred(posterior_at_t$theta, "
"0","                                       posterior_at_t$epsilon,"
"0","                                       posterior_at_t$posterior)"
"0","    "
"0","    df$EIG[t] = (1-df$post_pred[t]) * df$dkl_if_0[t] + df$post_pred[t] * df$dkl_if_1[t] "
"0","    "
"0","    # flip a coin with p_keep_looking weight"
"0","    df$p_look_away[t] = C / (df$EIG[t] + C)"
"0","    df$look_away[t] = rbinom(1, 1, prob = df$p_look_away[t]) == 1"
"0","    "
"0","    # if heads, learn from another sample of the same stimulus"
"0","    if (df$look_away[t]) {"
"0","      stimulus_idx <- stimulus_idx + 1"
"0","    }"
"0","    "
"0","    t <- t + 1 "
"0","  }"
"0","}"
"2","Error in if (zij == yi) { : missing value where TRUE/FALSE needed
"
