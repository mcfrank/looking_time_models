
// Code generated by stanc v2.30.1
#include <stan/model/model_header.hpp>
namespace multi_feature_model_namespace {

using stan::model::model_base_crtp;
using namespace stan::math;


stan::math::profile_map profiles__;
static constexpr std::array<const char*, 39> locations_array__ = 
{" (found before start of program)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 21, column 4 to column 17)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 22, column 4 to column 29)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 23, column 4 to column 19)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 24, column 4 to column 24)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 50, column 0 to column 16)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 53, column 8 to column 50)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 52, column 14 to line 54, column 2)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 52, column 0 to line 54, column 2)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 29, column 4 to column 41)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 34, column 8 to column 39)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 35, column 8 to column 49)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 39, column 12 to column 46)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 38, column 22 to line 40, column 9)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 38, column 8 to line 40, column 9)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 44, column 12 to column 59)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 43, column 22 to line 45, column 9)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 43, column 8 to line 45, column 9)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 32, column 18 to line 46, column 5)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 32, column 4 to line 46, column 5)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 2, column 4 to column 19)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 3, column 4 to column 19)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 4, column 4 to column 19)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 5, column 11 to column 12)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 5, column 14 to column 15)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 5, column 4 to column 19)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 7, column 10 to column 11)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 7, column 4 to column 30)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 10, column 4 to column 17)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 11, column 4 to column 24)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 13, column 4 to column 30)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 14, column 4 to column 29)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 16, column 4 to column 29)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 17, column 4 to column 27)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 21, column 11 to column 12)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 22, column 20 to column 21)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 23, column 11 to column 12)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 23, column 14 to column 15)",
 " (in '/Users/galraz1/Developer/looking_time_models/PPL_attempts/stan/multi_feature.stan', line 50, column 7 to column 8)"};




class multi_feature_model final : public model_base_crtp<multi_feature_model> {

 private:
  int F;
  int M;
  int K;
  Eigen::Matrix<double, -1, -1> z_data__;
  std::vector<int> exemplar_idx;
  double mu_mean;
  double mu_sd;
  double sigma_alpha;
  double sigma_beta;
  double noise_mean;
  double noise_sd; 
  Eigen::Map<Eigen::Matrix<double, -1, -1>> z{nullptr, 0, 0};
 
 public:
  ~multi_feature_model() { }
  
  inline std::string model_name() const final { return "multi_feature_model"; }

  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.30.1", "stancflags = "};
  }
  
  
  multi_feature_model(stan::io::var_context& context__,
                      unsigned int random_seed__ = 0,
                      std::ostream* pstream__ = nullptr) : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double ;
    boost::ecuyer1988 base_rng__ = 
        stan::services::util::create_rng(random_seed__, 0);
    (void) base_rng__;  // suppress unused var warning
    static constexpr const char* function__ = "multi_feature_model_namespace::multi_feature_model";
    (void) function__;  // suppress unused var warning
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 20;
      context__.validate_dims("data initialization","F","int",
           std::vector<size_t>{});
      F = std::numeric_limits<int>::min();
      
      
      current_statement__ = 20;
      F = context__.vals_i("F")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "F", F, 1);
      current_statement__ = 21;
      context__.validate_dims("data initialization","M","int",
           std::vector<size_t>{});
      M = std::numeric_limits<int>::min();
      
      
      current_statement__ = 21;
      M = context__.vals_i("M")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "M", M, 1);
      current_statement__ = 22;
      context__.validate_dims("data initialization","K","int",
           std::vector<size_t>{});
      K = std::numeric_limits<int>::min();
      
      
      current_statement__ = 22;
      K = context__.vals_i("K")[(1 - 1)];
      current_statement__ = 22;
      stan::math::check_greater_or_equal(function__, "K", K, 1);
      current_statement__ = 23;
      stan::math::validate_non_negative_index("z", "F", F);
      current_statement__ = 24;
      stan::math::validate_non_negative_index("z", "M", M);
      current_statement__ = 25;
      context__.validate_dims("data initialization","z","double",
           std::vector<size_t>{static_cast<size_t>(F),
            static_cast<size_t>(M)});
      z_data__ = 
        Eigen::Matrix<double, -1, -1>::Constant(F, M,
          std::numeric_limits<double>::quiet_NaN());
      new (&z) Eigen::Map<Eigen::Matrix<double, -1, -1>>(z_data__.data(), F, M);
        
      
      {
        std::vector<local_scalar_t__> z_flat__;
        current_statement__ = 25;
        z_flat__ = context__.vals_r("z");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= M; ++sym1__) {
          current_statement__ = 25;
          for (int sym2__ = 1; sym2__ <= F; ++sym2__) {
            current_statement__ = 25;
            stan::model::assign(z, z_flat__[(pos__ - 1)],
              "assigning variable z", stan::model::index_uni(sym2__),
                                        stan::model::index_uni(sym1__));
            current_statement__ = 25;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("exemplar_idx", "M", M);
      current_statement__ = 27;
      context__.validate_dims("data initialization","exemplar_idx","int",
           std::vector<size_t>{static_cast<size_t>(M)});
      exemplar_idx = std::vector<int>(M, std::numeric_limits<int>::min());
      
      
      current_statement__ = 27;
      exemplar_idx = context__.vals_i("exemplar_idx");
      current_statement__ = 28;
      context__.validate_dims("data initialization","mu_mean","double",
           std::vector<size_t>{});
      mu_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 28;
      mu_mean = context__.vals_r("mu_mean")[(1 - 1)];
      current_statement__ = 29;
      context__.validate_dims("data initialization","mu_sd","double",
           std::vector<size_t>{});
      mu_sd = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 29;
      mu_sd = context__.vals_r("mu_sd")[(1 - 1)];
      current_statement__ = 29;
      stan::math::check_greater_or_equal(function__, "mu_sd", mu_sd, 0);
      current_statement__ = 30;
      context__.validate_dims("data initialization","sigma_alpha","double",
           std::vector<size_t>{});
      sigma_alpha = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 30;
      sigma_alpha = context__.vals_r("sigma_alpha")[(1 - 1)];
      current_statement__ = 30;
      stan::math::check_greater_or_equal(function__, "sigma_alpha",
                                            sigma_alpha, 0);
      current_statement__ = 31;
      context__.validate_dims("data initialization","sigma_beta","double",
           std::vector<size_t>{});
      sigma_beta = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 31;
      sigma_beta = context__.vals_r("sigma_beta")[(1 - 1)];
      current_statement__ = 31;
      stan::math::check_greater_or_equal(function__, "sigma_beta",
                                            sigma_beta, 0);
      current_statement__ = 32;
      context__.validate_dims("data initialization","noise_mean","double",
           std::vector<size_t>{});
      noise_mean = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 32;
      noise_mean = context__.vals_r("noise_mean")[(1 - 1)];
      current_statement__ = 32;
      stan::math::check_greater_or_equal(function__, "noise_mean",
                                            noise_mean, 0);
      current_statement__ = 33;
      context__.validate_dims("data initialization","noise_sd","double",
           std::vector<size_t>{});
      noise_sd = std::numeric_limits<double>::quiet_NaN();
      
      
      current_statement__ = 33;
      noise_sd = context__.vals_r("noise_sd")[(1 - 1)];
      current_statement__ = 33;
      stan::math::check_greater_or_equal(function__, "noise_sd", noise_sd, 0);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("mu", "F", F);
      current_statement__ = 35;
      stan::math::validate_non_negative_index("sigma", "F", F);
      current_statement__ = 36;
      stan::math::validate_non_negative_index("y", "F", F);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("y", "K", K);
      current_statement__ = 38;
      stan::math::validate_non_negative_index("z_rep", "F", F);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = F + F + (F * K) + 1;
    
  }
  
  template <bool propto__, bool jacobian__ , typename VecR, typename VecI, 
  stan::require_vector_like_t<VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline stan::scalar_type_t<VecR> log_prob_impl(VecR& params_r__,
                                                 VecI& params_i__,
                                                 std::ostream* pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multi_feature_model_namespace::log_prob";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<local_scalar_t__, -1, 1> mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(F, DUMMY_VAR__);
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(F);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(F, DUMMY_VAR__);
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                F);
      Eigen::Matrix<local_scalar_t__, -1, -1> y =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(F, K, DUMMY_VAR__);
      current_statement__ = 3;
      y = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(F, K);
      local_scalar_t__ noise = DUMMY_VAR__;
      current_statement__ = 4;
      noise = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      {
        current_statement__ = 9;
        lp_accum__.add(
          stan::math::normal_lpdf<propto__>(noise, noise_mean, noise_sd));
        current_statement__ = 19;
        for (int f = 1; f <= F; ++f) {
          current_statement__ = 10;
          lp_accum__.add(
            stan::math::normal_lpdf<propto__>(
              stan::model::rvalue(mu, "mu", stan::model::index_uni(f)),
              mu_mean, mu_sd));
          current_statement__ = 11;
          lp_accum__.add(
            stan::math::gamma_lpdf<propto__>(
              stan::model::rvalue(sigma, "sigma", stan::model::index_uni(f)),
              sigma_alpha, sigma_beta));
          current_statement__ = 14;
          for (int k = 1; k <= K; ++k) {
            current_statement__ = 12;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(f), stan::model::index_uni(k)),
                stan::model::rvalue(mu, "mu", stan::model::index_uni(f)),
                stan::model::rvalue(sigma, "sigma",
                  stan::model::index_uni(f))));
          }
          current_statement__ = 17;
          for (int m = 1; m <= M; ++m) {
            current_statement__ = 15;
            lp_accum__.add(
              stan::math::normal_lpdf<propto__>(
                stan::model::rvalue(z, "z",
                  stan::model::index_uni(f), stan::model::index_uni(m)),
                stan::model::rvalue(y, "y",
                  stan::model::index_uni(f),
                    stan::model::index_uni(stan::model::rvalue(exemplar_idx,
                                             "exemplar_idx",
                                             stan::model::index_uni(m)))),
                noise));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
    } // log_prob_impl() 
    
  template <typename RNG, typename VecR, typename VecI, typename VecVar, 
  stan::require_vector_like_vt<std::is_floating_point, VecR>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr, 
  stan::require_vector_vt<std::is_floating_point, VecVar>* = nullptr> 
  inline void write_array_impl(RNG& base_rng__, VecR& params_r__,
                               VecI& params_i__, VecVar& vars__,
                               const bool emit_transformed_parameters__ = true,
                               const bool emit_generated_quantities__ = true,
                               std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    (void) propto__;
    double lp__ = 0.0;
    (void) lp__;  // dummy to suppress unused var warning
    int current_statement__ = 0; 
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    constexpr bool jacobian__ = false;
    (void) DUMMY_VAR__;  // suppress unused var warning
    static constexpr const char* function__ = "multi_feature_model_namespace::write_array";
    (void) function__;  // suppress unused var warning
    
    try {
      Eigen::Matrix<double, -1, 1> mu =
         Eigen::Matrix<double, -1, 1>::Constant(F,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 1;
      mu = in__.template read<Eigen::Matrix<local_scalar_t__, -1, 1>>(F);
      Eigen::Matrix<double, -1, 1> sigma =
         Eigen::Matrix<double, -1, 1>::Constant(F,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 2;
      sigma = in__.template read_constrain_lb<
                Eigen::Matrix<local_scalar_t__, -1, 1>, jacobian__>(0, lp__,
                F);
      Eigen::Matrix<double, -1, -1> y =
         Eigen::Matrix<double, -1, -1>::Constant(F, K,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      y = in__.template read<Eigen::Matrix<local_scalar_t__, -1, -1>>(F, K);
      double noise = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      noise = in__.template read_constrain_lb<local_scalar_t__, jacobian__>(
                0, lp__);
      out__.write(mu);
      out__.write(sigma);
      out__.write(y);
      out__.write(noise);
      if (stan::math::logical_negation((stan::math::primitive_value(
            emit_transformed_parameters__) || stan::math::primitive_value(
            emit_generated_quantities__)))) {
        return ;
      } 
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      } 
      Eigen::Matrix<double, -1, 1> z_rep =
         Eigen::Matrix<double, -1, 1>::Constant(F,
           std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 8;
      for (int f = 1; f <= F; ++f) {
        current_statement__ = 6;
        stan::model::assign(z_rep,
          (stan::model::rvalue(y, "y",
             stan::model::index_uni(f), stan::model::index_uni(K)) +
            stan::math::normal_rng(0, noise, base_rng__)),
          "assigning variable z_rep", stan::model::index_uni(f));
      }
      out__.write(z_rep);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // write_array_impl() 
    
  template <typename VecVar, typename VecI, 
  stan::require_vector_t<VecVar>* = nullptr, 
  stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr> 
  inline void transform_inits_impl(VecVar& params_r__, VecI& params_i__,
                                   VecVar& vars__,
                                   std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      Eigen::Matrix<local_scalar_t__, -1, 1> mu =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(F, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
        stan::model::assign(mu, in__.read<local_scalar_t__>(),
          "assigning variable mu", stan::model::index_uni(sym1__));
      }
      out__.write(mu);
      Eigen::Matrix<local_scalar_t__, -1, 1> sigma =
         Eigen::Matrix<local_scalar_t__, -1, 1>::Constant(F, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
        stan::model::assign(sigma, in__.read<local_scalar_t__>(),
          "assigning variable sigma", stan::model::index_uni(sym1__));
      }
      out__.write_free_lb(0, sigma);
      Eigen::Matrix<local_scalar_t__, -1, -1> y =
         Eigen::Matrix<local_scalar_t__, -1, -1>::Constant(F, K, DUMMY_VAR__);
      for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
        for (int sym2__ = 1; sym2__ <= F; ++sym2__) {
          stan::model::assign(y, in__.read<local_scalar_t__>(),
            "assigning variable y", stan::model::index_uni(sym2__),
                                      stan::model::index_uni(sym1__));
        }
      }
      out__.write(y);
      local_scalar_t__ noise = DUMMY_VAR__;
      noise = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, noise);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    } // transform_inits_impl() 
    
  inline void get_param_names(std::vector<std::string>& names__) const {
    
    names__ = std::vector<std::string>{"mu", "sigma", "y", "noise", "z_rep"};
    
    } // get_param_names() 
    
  inline void get_dims(std::vector<std::vector<size_t>>& dimss__) const {
    
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{
                                                                   static_cast<size_t>(F)
                                                                   },
      std::vector<size_t>{static_cast<size_t>(F)},
      std::vector<size_t>{static_cast<size_t>(F), static_cast<size_t>(K)},
      std::vector<size_t>{}, std::vector<size_t>{static_cast<size_t>(F)}};
    
    } // get_dims() 
    
  inline void constrained_param_names(
                                      std::vector<std::string>& param_names__,
                                      bool emit_transformed_parameters__ = true,
                                      bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= F; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "noise");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_rep" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // constrained_param_names() 
    
  inline void unconstrained_param_names(
                                        std::vector<std::string>& param_names__,
                                        bool emit_transformed_parameters__ = true,
                                        bool emit_generated_quantities__ = true) const
    final {
    
    for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "mu" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
      {
        param_names__.emplace_back(std::string() + "sigma" + '.' + std::to_string(sym1__));
      } 
    }
    for (int sym1__ = 1; sym1__ <= K; ++sym1__) {
      {
        for (int sym2__ = 1; sym2__ <= F; ++sym2__) {
          {
            param_names__.emplace_back(std::string() + "y" + '.' + std::to_string(sym2__) + '.' + std::to_string(sym1__));
          } 
        }
      } 
    }
    param_names__.emplace_back(std::string() + "noise");
    if (emit_transformed_parameters__) {
      
    }
    
    if (emit_generated_quantities__) {
      for (int sym1__ = 1; sym1__ <= F; ++sym1__) {
        {
          param_names__.emplace_back(std::string() + "z_rep" + '.' + std::to_string(sym1__));
        } 
      }
    }
    
    } // unconstrained_param_names() 
    
  inline std::string get_constrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(F) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_constrained_sizedtypes() 
    
  inline std::string get_unconstrained_sizedtypes() const {
    
    return std::string("[{\"name\":\"mu\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"parameters\"},{\"name\":\"sigma\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"parameters\"},{\"name\":\"y\",\"type\":{\"name\":\"matrix\",\"rows\":" + std::to_string(F) + ",\"cols\":" + std::to_string(K) + "},\"block\":\"parameters\"},{\"name\":\"noise\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"z_rep\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(F) + "},\"block\":\"generated_quantities\"}]");
    
    } // get_unconstrained_sizedtypes() 
    
  
    // Begin method overload boilerplate
    template <typename RNG>
    inline void write_array(RNG& base_rng,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                            Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                            const bool emit_transformed_parameters = true,
                            const bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((F + F) + (F * K)) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * F;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      std::vector<int> params_i;
      vars = Eigen::Matrix<double, Eigen::Dynamic, 1>::Constant(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <typename RNG>
    inline void write_array(RNG& base_rng, std::vector<double>& params_r,
                            std::vector<int>& params_i,
                            std::vector<double>& vars,
                            bool emit_transformed_parameters = true,
                            bool emit_generated_quantities = true,
                            std::ostream* pstream = nullptr) const {
      const size_t num_params__ = 
  (((F + F) + (F * K)) + 1);
      const size_t num_transformed = emit_transformed_parameters * 0;
      const size_t num_gen_quantities = emit_generated_quantities * F;
      const size_t num_to_write = num_params__ + num_transformed +
        num_gen_quantities;
      vars = std::vector<double>(num_to_write,
        std::numeric_limits<double>::quiet_NaN());
      write_array_impl(base_rng, params_r, params_i, vars,
        emit_transformed_parameters, emit_generated_quantities, pstream);
    }

    template <bool propto__, bool jacobian__, typename T_>
    inline T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
                       std::ostream* pstream = nullptr) const {
      Eigen::Matrix<int, -1, 1> params_i;
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }

    template <bool propto__, bool jacobian__, typename T__>
    inline T__ log_prob(std::vector<T__>& params_r,
                        std::vector<int>& params_i,
                        std::ostream* pstream = nullptr) const {
      return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
    }


    inline void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream = nullptr) const final {
      std::vector<double> params_r_vec(params_r.size());
      std::vector<int> params_i;
      transform_inits(context, params_i, params_r_vec, pstream);
      params_r = Eigen::Map<Eigen::Matrix<double,Eigen::Dynamic,1>>(
        params_r_vec.data(), params_r_vec.size());
    }

  inline void transform_inits(const stan::io::var_context& context,
                              std::vector<int>& params_i,
                              std::vector<double>& vars,
                              std::ostream* pstream__ = nullptr) const {
     constexpr std::array<const char*, 4> names__{"mu", "sigma", "y",
      "noise"};
      const std::array<Eigen::Index, 4> constrain_param_sizes__{F, F, 
       (F * K), 1};
      const auto num_constrained_params__ = std::accumulate(
        constrain_param_sizes__.begin(), constrain_param_sizes__.end(), 0);
    
     std::vector<double> params_r_flat__(num_constrained_params__);
     Eigen::Index size_iter__ = 0;
     Eigen::Index flat_iter__ = 0;
     for (auto&& param_name__ : names__) {
       const auto param_vec__ = context.vals_r(param_name__);
       for (Eigen::Index i = 0; i < constrain_param_sizes__[size_iter__]; ++i) {
         params_r_flat__[flat_iter__] = param_vec__[i];
         ++flat_iter__;
       }
       ++size_iter__;
     }
     vars.resize(num_params_r__);
     transform_inits_impl(params_r_flat__, params_i, vars, pstream__);
    } // transform_inits() 
    
};
}
using stan_model = multi_feature_model_namespace::multi_feature_model;

#ifndef USING_R

// Boilerplate
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}

stan::math::profile_map& get_stan_profile_data() {
  return multi_feature_model_namespace::profiles__;
}

#endif


